<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yarchen&#39;s Blog</title>
  
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="https://yarchen.github.io/atom.xml" rel="self"/>
  
  <link href="https://yarchen.github.io/"/>
  <updated>2024-03-22T01:39:41.748Z</updated>
  <id>https://yarchen.github.io/</id>
  
  <author>
    <name>Yarchen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>adb使用</title>
    <link href="https://yarchen.github.io/2024/03/21/adb%E4%BD%BF%E7%94%A8/"/>
    <id>https://yarchen.github.io/2024/03/21/adb%E4%BD%BF%E7%94%A8/</id>
    <published>2024-03-21T12:57:38.000Z</published>
    <updated>2024-03-22T01:39:41.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改手机分辨率"><a href="#修改手机分辨率" class="headerlink" title="修改手机分辨率"></a>修改手机分辨率</h1><p>设置手机分辨率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size 1080*1920</span><br></pre></td></tr></table></figure><p>重置手机分辨率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb wm size reset</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;修改手机分辨率&quot;&gt;&lt;a href=&quot;#修改手机分辨率&quot; class=&quot;headerlink&quot; title=&quot;修改手机分辨率&quot;&gt;&lt;/a&gt;修改手机分辨率&lt;/h1&gt;&lt;p&gt;设置手机分辨率&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux查看网络流量的方法</title>
    <link href="https://yarchen.github.io/2024/03/21/Linux%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://yarchen.github.io/2024/03/21/Linux%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2024-03-21T08:32:07.000Z</published>
    <updated>2024-03-22T01:44:36.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看网络状况"><a href="#查看网络状况" class="headerlink" title="查看网络状况"></a>查看网络状况</h1><p>Linux并没有直接监控网络流量变化的办法，但是<code>ifconfig</code>可以统计到每个网络接口的流量，如下图所示：<br><img src="/2024/03/21/Linux%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/ifconfig.png" alt="ifconfig"><br>在对应的端口第5行和第7行这里显示了该端口收发数据包和收发流量的情况<br>通过比较两次打印的差值，我们就可以大致知道在该段时间内网络的流量情况</p><h1 id="使用脚本统计流量"><a href="#使用脚本统计流量" class="headerlink" title="使用脚本统计流量"></a>使用脚本统计流量</h1><p>通过人工比对差值，不仅耗时，而且容易出现差错，因此最好能够使用Shell脚本自动地帮我们进行统计</p><p>首先，我们需要先将有用的数据（网卡RX、TX数据包总量）提取出来</p><p>通过grep和sed命令可以很方便地帮我们提取到想要的数据，例如要获取eth0网卡的RX、TX数据包总量，可以使用如下的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 | sed -n &#x27;s#^.*bytes \(.*\) (.*$#\1#gp&#x27;</span><br></pre></td></tr></table></figure><p>上述命令执行后会打印两行数字，第一行是RX的值，第二行是TX的值，像下面这样<br><img src="/2024/03/21/Linux%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/%E6%8C%87%E4%BB%A41.png" alt="cmd"></p><p>为了将其存储为可用数据，我们可以使用数组来进行存储，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -a nw=($(ifconfig eth0 | sed -n &#x27;s#^.*bytes \(.*\) (.*$#\1#gp&#x27;))</span><br></pre></td></tr></table></figure><p>这样nw[0]就是实时接收到的数据包总大小（单位bytes），nw[1]就是实时发送的数据包总大小（单位bytes）</p><p>通过不断比较两个数组的差值，并将其打印出来，我们就获得了实时监视的网络流量，但是需要注意其单位并不是网络中常用的bit，而是byte，</p><p>最终实现的脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">declare -a old=($(ifconfig $1 | sed -n &#x27;s#^.*bytes \(.*\) (.*$#\1#gp&#x27;))</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">sleep 1</span><br><span class="line">    declare -a new=($(ifconfig $1 | sed -n &#x27;s#^.*bytes \(.*\) (.*$#\1#gp&#x27;))</span><br><span class="line">declare -i rx=$(($&#123;new[0]&#125;-$&#123;old[0]&#125;))\*8</span><br><span class="line">declare -i tx=$(($&#123;new[1]&#125;-$&#123;old[1]&#125;))\*8</span><br><span class="line">old=($&#123;new[0]&#125; $&#123;new[1]&#125;)</span><br><span class="line">echo &quot;$(date +[%m-%d\ %H:%M:%S]) RX $rx bits,TX $tx bits&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该脚本读取一个网卡名称作为参数($1)，然后每隔1s统计一次对应的ifconfig的报文总量，并与上1s所统计的报文总量进行比较，打印其中的差值，为了使该数据更符合实际需要，我们在其基础上乘以8来变成bit<br>脚本执行的效果如下<br><img src="/2024/03/21/Linux%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/shell.png" alt="shell"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看网络状况&quot;&gt;&lt;a href=&quot;#查看网络状况&quot; class=&quot;headerlink&quot; title=&quot;查看网络状况&quot;&gt;&lt;/a&gt;查看网络状况&lt;/h1&gt;&lt;p&gt;Linux并没有直接监控网络流量变化的办法，但是&lt;code&gt;ifconfig&lt;/code&gt;可以统计到每个网络</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux自动运行脚本的几种方法</title>
    <link href="https://yarchen.github.io/2024/03/20/Linux%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://yarchen.github.io/2024/03/20/Linux%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2024-03-20T08:49:52.000Z</published>
    <updated>2024-03-22T01:39:46.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开机自动运行"><a href="#开机自动运行" class="headerlink" title="开机自动运行"></a>开机自动运行</h1><h2 id="作为单一脚本运行"><a href="#作为单一脚本运行" class="headerlink" title="作为单一脚本运行"></a>作为单一脚本运行</h2><p>作为开机运行的脚本，一种方式是可以链接到rc.local中</p><h2 id="作为系统服务运行"><a href="#作为系统服务运行" class="headerlink" title="作为系统服务运行"></a>作为系统服务运行</h2><p>另一种方法是使用systemctl进行管理，这种方式需要创建包含对应程序的服务（service），并设置enable即可实现开机启动，并可轻松实现日志记录、起停等动作</p><h1 id="定时运行"><a href="#定时运行" class="headerlink" title="定时运行"></a>定时运行</h1><h2 id="只运行一次"><a href="#只运行一次" class="headerlink" title="只运行一次"></a>只运行一次</h2><p>只运行一次的话，可以使用<code>at</code>命令</p><h2 id="周期运行"><a href="#周期运行" class="headerlink" title="周期运行"></a>周期运行</h2><h3 id="准确时间"><a href="#准确时间" class="headerlink" title="准确时间"></a>准确时间</h3><p>如果需要周期性地执行某个命令，那么需要使用crontab来实现</p><h3 id="随机选择时间"><a href="#随机选择时间" class="headerlink" title="随机选择时间"></a>随机选择时间</h3><p>可以将脚本放在crontab的&#x2F;etc&#x2F;cron.d&#x2F;*目录下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开机自动运行&quot;&gt;&lt;a href=&quot;#开机自动运行&quot; class=&quot;headerlink&quot; title=&quot;开机自动运行&quot;&gt;&lt;/a&gt;开机自动运行&lt;/h1&gt;&lt;h2 id=&quot;作为单一脚本运行&quot;&gt;&lt;a href=&quot;#作为单一脚本运行&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Linux" scheme="https://yarchen.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>第一篇文档</title>
    <link href="https://yarchen.github.io/2024/03/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E6%A1%A3/"/>
    <id>https://yarchen.github.io/2024/03/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E6%A1%A3/</id>
    <published>2024-03-20T07:57:10.000Z</published>
    <updated>2024-03-20T07:58:12.271Z</updated>
    
    <content type="html"><![CDATA[<p>这里是随便写的摘要</p><span id="more"></span><h1 id="这是标题一"><a href="#这是标题一" class="headerlink" title="这是标题一"></a>这是标题一</h1><p>测试一下hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure><h2 id="这是1-2"><a href="#这是1-2" class="headerlink" title="这是1.2"></a>这是1.2</h2><p>哈哈哈哈<br>插入一张图片</p><p><img src="/2024/03/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E6%A1%A3/IMG_1462.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里是随便写的摘要&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
